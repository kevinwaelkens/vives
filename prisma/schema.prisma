generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String
  role          Role           @default(TUTOR)
  refreshToken  String?
  lastLoginAt   DateTime?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  auditLogs     AuditLog[]
  comments      Comment[]
  notifications Notification[]
  userRoles     UserRole[]
  groups        Group[]        @relation("GroupTutors")

  @@index([email])
  @@index([role])
}

model Group {
  id           String       @id @default(cuid())
  name         String
  code         String       @unique
  academicYear String
  grade        String
  settings     Json?        @default("{}")
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attendance   Attendance[]
  students     Student[]
  tasks        Task[]       @relation("GroupTasks")
  tutors       User[]       @relation("GroupTutors")

  @@index([academicYear, grade])
  @@index([code])
}

model Student {
  id             String          @id @default(cuid())
  studentId      String          @unique
  name           String
  email          String          @unique
  dateOfBirth    DateTime?
  groupId        String
  notes          String?
  status         StudentStatus   @default(ACTIVE)
  customFields   Json?           @default("{}")
  enrolledAt     DateTime        @default(now())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  assessments    Assessment[]
  attendance     Attendance[]
  parentContacts ParentContact[]
  group          Group           @relation(fields: [groupId], references: [id])
  tasks          Task[]          @relation("StudentTasks")

  @@index([groupId])
  @@index([email])
  @@index([studentId])
  @@index([status])
}

model ParentContact {
  id           String   @id @default(cuid())
  studentId    String
  name         String
  email        String
  phone        String?
  relationship String
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([email])
}

model Task {
  id                  String       @id @default(cuid())
  title               String
  description         String
  instructions        String?
  type                TaskType     @default(ASSIGNMENT)
  category            String?
  points              Float?       @default(100)
  weight              Float?       @default(1.0)
  assignedAt          DateTime     @default(now())
  dueDate             DateTime?
  allowLateSubmission Boolean      @default(true)
  rubric              Json?        @default("{}")
  createdById         String
  isPublished         Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  assessments         Assessment[]
  attachments         Attachment[]
  groups              Group[]      @relation("GroupTasks")
  students            Student[]    @relation("StudentTasks")

  @@index([dueDate])
  @@index([type])
  @@index([isPublished])
}

model Assessment {
  id          String           @id @default(cuid())
  taskId      String
  studentId   String
  score       Float?
  grade       String?
  feedback    String?
  rubricData  Json?            @default("{}")
  status      AssessmentStatus @default(NOT_SUBMITTED)
  submittedAt DateTime?
  gradedAt    DateTime?
  gradedById  String?
  version     Int              @default(1)
  isLatest    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  student     Student          @relation(fields: [studentId], references: [id])
  task        Task             @relation(fields: [taskId], references: [id])
  attachments Attachment[]
  comments    Comment[]

  @@unique([taskId, studentId, version])
  @@index([studentId])
  @@index([taskId])
  @@index([status])
}

model Attendance {
  id         String           @id @default(cuid())
  studentId  String
  groupId    String
  date       DateTime         @db.Date
  status     AttendanceStatus
  period     String?
  notes      String?
  markedById String
  markedAt   DateTime         @default(now())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  group      Group            @relation(fields: [groupId], references: [id])
  student    Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, date, period])
  @@index([studentId])
  @@index([groupId])
  @@index([date])
  @@index([status])
}

model Comment {
  id           String     @id @default(cuid())
  content      String
  assessmentId String
  authorId     String
  parentId     String?
  isEdited     Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  author       User       @relation(fields: [authorId], references: [id])
  parent       Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[]  @relation("CommentReplies")

  @@index([assessmentId])
  @@index([authorId])
  @@index([parentId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?            @default("{}")
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([type])
  @@index([createdAt])
}

model Attachment {
  id           String      @id @default(cuid())
  filename     String
  url          String
  mimeType     String
  size         Int
  taskId       String?
  assessmentId String?
  uploadedById String
  createdAt    DateTime    @default(now())
  assessment   Assessment? @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  task         Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([assessmentId])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  content   String
  variables Json     @default("[]")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model BulkOperation {
  id          String              @id @default(cuid())
  type        BulkOperationType
  status      BulkOperationStatus @default(PENDING)
  totalItems  Int
  processed   Int                 @default(0)
  failed      Int                 @default(0)
  errors      Json?               @default("[]")
  results     Json?               @default("{}")
  startedAt   DateTime?
  completedAt DateTime?
  createdById String
  createdAt   DateTime            @default(now())

  @@index([type, status])
  @@index([createdById])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String?
  oldValues Json?
  newValues Json?
  userId    String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  category        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@index([name])
  @@index([category])
}

model SystemRole {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isDefault       Boolean          @default(false)
  isSystem        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@index([name])
  @@index([isDefault])
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         SystemRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserRole {
  id         String     @id @default(cuid())
  userId     String
  roleId     String
  context    Json?      @default("{}")
  assignedAt DateTime   @default(now())
  assignedBy String?
  expiresAt  DateTime?
  role       SystemRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Language {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  nativeName   String
  flag         String?
  isActive     Boolean       @default(true)
  isDefault    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  translations Translation[]

  @@index([code])
  @@index([isActive])
}

model TranslationKey {
  id           String        @id @default(cuid())
  key          String        @unique
  englishText  String
  description  String?
  category     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  translations Translation[]

  @@index([key])
  @@index([category])
}

model Translation {
  id               String         @id @default(cuid())
  translationKeyId String
  languageId       String
  text             String
  isApproved       Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  language         Language       @relation(fields: [languageId], references: [id], onDelete: Cascade)
  translationKey   TranslationKey @relation(fields: [translationKeyId], references: [id], onDelete: Cascade)

  @@unique([translationKeyId, languageId])
  @@index([translationKeyId])
  @@index([languageId])
}

enum Role {
  ADMIN
  TUTOR
  VIEWER
  PARENT
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
}

enum TaskType {
  ASSIGNMENT
  QUIZ
  EXAM
  PROJECT
  HOMEWORK
}

enum AssessmentStatus {
  NOT_SUBMITTED
  SUBMITTED
  LATE_SUBMITTED
  GRADED
  RETURNED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum NotificationType {
  TASK_ASSIGNED
  ASSESSMENT_SUBMITTED
  GRADE_RELEASED
  COMMENT_ADDED
  ATTENDANCE_MARKED
  SYSTEM_ALERT
}

enum BulkOperationType {
  STUDENT_IMPORT
  GRADE_IMPORT
  ATTENDANCE_IMPORT
  TASK_ASSIGNMENT
  NOTIFICATION_SEND
}

enum BulkOperationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
